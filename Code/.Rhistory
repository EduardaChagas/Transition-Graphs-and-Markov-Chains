install.packages('elastic')
if(!require(DBI)) install.packages("DBI")
if(!require(glue)) install.packages("glue")
################################################################################
# Author: Eduarda Chagas
# Date : Feb, 2021
# Contact: eduarda.chagas@dcc.ufmg.br
################################################################################
# Packages and sources ---------------------------------------------------------
if(!require(DBI)) install.packages("DBI")
if(!require(glue)) install.packages("glue")
if(!require(data.table)) install.packages("data.table")
if(!require(data.table)) install.packages("data.table")
if(!require(RPostgreSQL)) install.packages("RPostgreSQL")
if(!require(RPostgreSQL)) install.packages("RPostgreSQL")
################################################################################
# Author: Eduarda Chagas
# Date : Feb, 2021
# Contact: eduarda.chagas@dcc.ufmg.br
################################################################################
# Packages and sources ---------------------------------------------------------
if(!require(tjsp)) install.packages("tjsp")
install.packages("tjsp")
if(!require(httr)) install.packages("httr")
# if(!require(glue)) install.packages("glue")
if(!require(data.table)) install.packages("data.table",dependencies=TRUE)
if(!require(httr)) install.packages("httr",dependencies=TRUE)
################################################################################
# Author: Eduarda Chagas
# Date : Feb, 2021
# Contact: eduarda.chagas@dcc.ufmg.br
################################################################################
# Packages and sources ---------------------------------------------------------
if(!require(tjsp)) install.packages("tjsp",dependencies=TRUE)
require(emotes)
require(remotes)
install.packages("remotes")
################################################################################
# Author: Eduarda Chagas
# Date : Feb, 2021
# Contact: eduarda.chagas@dcc.ufmg.br
################################################################################
# Packages and sources ---------------------------------------------------------
if(!require(tjsp)){
if(!require(remotes)){
install.packages("remotes",dependencies=TRUE)
}
remotes::install_github("jjesusfilho/tjsp")
}
remotes::install_github("jjesusfilho/tjsp")
install.packages('abjutils')
remotes::install_github("abjur/abjutils")
28*30
840+760
remotes::install_github("jjesusfilho/tjsp")
devtools::install_github("jjesusfilho/tjsp")
if(!require(devtools)){
install.packages("devtools",dependencies=TRUE)
}
install.packages('usethis')
install.packages('usethis')
install.packages('usethis')
devtools::install_github("jjesusfilho/tjsp")
install.packages("devtools",dependencies=TRUE)
install.packages("devtools",dependencies=TRUE)
require(devtools)
require(devtools)
devtools::install_github("jjesusfilho/tjsp")
devtools::install_github("jjesusfilho/tjsp")
require(tjsp)
require(tjsp)
require(tjsp)
devtools::install_github("jjesusfilho/tjsp")
require(tjsp)
require(tjsp)
if(!require(DBI)) install.packages("DBI",dependencies=TRUE)
if(!require(httr)) install.packages("httr",dependencies=TRUE)
# if(!require(glue)) install.packages("glue")
if(!require(data.table)) install.packages("data.table",dependencies=TRUE)
if(!require(RPostgres)) install.packages("RPostgres",dependencies=TRUE)
require(RPostgres)
require(RPostgres)
if(!require(RPostgres)) install.packages("RPostgres",dependencies=TRUE)
require(RPostgres)
require(RPostgres)
if(!require(RPostgres)) install.packages("RPostgres",dependencies=TRUE)
# Step 1:  Open connection with PostgreSQL -------------------------------------
drv = DBI::dbDriver("PostgreSQL")
if(!require(RPostgres)) install.packages("RPostgres",dependencies=TRUE)
# Step 1:  Open connection with PostgreSQL -------------------------------------
drv = DBI::dbDriver("PostgreSQL")
if(!require(RPostgres)) install.packages("RPostgres",dependencies=TRUE)
# Step 1:  Open connection with PostgreSQL -------------------------------------
drv = DBI::dbDriver("PostgreSQL")
# Step 1:  Open connection with PostgreSQL -------------------------------------
conn = DBI::dbConnect(RPostgres::Postgres(), dbname="restored_database", user="eduarda")
conn
DBI::dbGetQuery(conn,
'select count(*) from table_process;')
DBI::dbGetQuery(conn,
'select count(*) from cjsg;')
# Step 1:  Open connection with PostgreSQL -------------------------------------
conn = DBI::dbConnect(RPostgres::Postgres(), dbname="tjsp", user="eduarda")
DBI::dbGetQuery(conn,
'select count(*) from cjsg;')
# Step 1:  Open connection with PostgreSQL -------------------------------------
conn = DBI::dbConnect(RPostgres::Postgres(), dbname = "tjsp", user = "eduarda")
DBI::dbGetQuery(conn, 'select count(*) from cjsg;')
DBI::dbDisconnect(conn)
sum(c(10:2))
540%%11
sum(c(11:2))
650%%11
# Packages and sources ---------------------------------------------------------
if(!require(tjsp)) install.packages("tjsp")
if(!require(DBI)) install.packages("DBI")
if(!require(httr)) install.packages("httr")
if(!require(glue)) install.packages("glue")
if(!require(data.table)) install.packages("data.table")
# Global variables -------------------------------------------------------------
start.date = '01/02/2021'
final.date = '01/02/2021'
num.pages = 30
# Step 1: Download cjsp pages --------------------------------------------------
dir.data.raw = "/home/eduarda/Desktop/Codes/JustPredict/Research/research-master/data-raw/"
dir.cjsp = paste0(dir.data.raw, 'cjsp')
dir.cposg = paste0(dir.data.raw, 'cposg')
tjsp::baixar_cjsg(inicio_pb = start.date, fim_pb = final.date,
diretorio = dir.cjsp, n = num.pages)
set_config(use_proxy(url = "10.3.100.207",port = 8080))
tjsp::baixar_cjsg(inicio_pb = start.date, fim_pb = final.date,
diretorio = dir.cjsp, n = num.pages)
set_config(
use_proxy(url="127.0.0.1", port=1080)
)
tjsp::baixar_cjsg(inicio_pb = start.date, fim_pb = final.date,
diretorio = dir.cjsp, n = num.pages)
set_config(
use_proxy(url="127.0.0.1", port=8080)
)
tjsp::baixar_cjsg(inicio_pb = start.date, fim_pb = final.date,
diretorio = dir.cjsp, n = num.pages)
set_config(use_proxy(url = "10.3.100.207",port = 8080))
tjsp::baixar_cjsg(inicio_pb = '14/09/2020', fim_pb = '14/09/2020',
diretorio = dir.cjsp, n = 1)
options(timeout = 400000)
tjsp::baixar_cjsg(inicio_pb = '14/09/2020', fim_pb = '14/09/2020',
diretorio = dir.cjsp, n = 1)
tjsp::autenticar("01597294594", "tekmuX-sacvo3-huchic")
set_config(use_proxy(url = "10.3.100.207",port = 8080))
tjsp::baixar_cjsg(inicio_pb = '14/09/2020', fim_pb = '14/09/2020',
diretorio = dir.cjsp, n = 1)
set_config(use_proxy(url = "10.3.100.207",port = 8080), verbose())
Sys.setenv(https_proxy="http://proxy:8000")
tjsp::baixar_cjsg(inicio_pb = '14/09/2020', fim_pb = '14/09/2020',
diretorio = dir.cjsp, n = 1)
curl_setopt($curl, CURLOPT_TIMEOUT,0);
try(pingr::ping(destination = "esaj.tjsp.jus.br", count = 3, timeout = 5))
try(pingr::ping(destination = "esaj.tjsp.jus.br"))
system.time(try(pingr::ping(destination = "esaj.tjsp.jus.br")))
try(pingr::ping(destination = "esaj.tjsp.jus.br", count = 3, timeout = 50))
options(timeout = 500000)
options(timeout = 5000000)
tjsp::baixar_cjsg(inicio_pb = '14/09/2020', fim_pb = '14/09/2020',
diretorio = dir.cjsp, n = 1)
?baixar_cjsg
baixar_cjsg(livre = "Lei Maria da Penha")
HTTP_PROXY=proxy.abc.xyz:80
HTTP_PROXY=use_proxy(url = "10.3.100.207",port = 8080):80
HTTP_PROXY=10.3.100.207:80
HTTP_PROXY=proxy.10.3.100.207:80
HTTP_PROXY=`10.3.100.207:80`
HTTP_PROXY='10.3.100.207:80'
HTTP_PROXYS='10.3.100.207:80'
tjsp::baixar_cjsg(inicio_pb = '14/09/2020', fim_pb = '14/09/2020',
diretorio = dir.cjsp, n = 1)
set_config(
use_proxy(url="127.0.0.1", port=1080)
)
tjsp::baixar_cjsg(inicio_pb = '14/09/2020', fim_pb = '14/09/2020',
diretorio = dir.cjsp, n = 1)
# Packages and sources ---------------------------------------------------------
if(!require(tjsp)) install.packages("tjsp")
if(!require(DBI)) install.packages("DBI")
if(!require(httr)) install.packages("httr")
if(!require(glue)) install.packages("glue")
if(!require(data.table)) install.packages("data.table")
# Packages and sources ---------------------------------------------------------
if(!require(tjsp)) install.packages("tjsp")
if(!require(DBI)) install.packages("DBI")
if(!require(httr)) install.packages("httr")
if(!require(glue)) install.packages("glue")
if(!require(data.table)) install.packages("data.table")
start.date = '01/02/2021'
final.date = '01/02/2021'
num.pages = 30
# Step 1: Download cjsp pages --------------------------------------------------
dir.data.raw = "/home/eduarda/Desktop/Codes/JustPredict/Research/research-master/data-raw/"
dir.cjsp = paste0(dir.data.raw, 'cjsp')
dir.cposg = paste0(dir.data.raw, 'cposg')
tjsp::baixar_cjsg(inicio_pb = '14/09/2020', fim_pb = '14/09/2020',
diretorio = dir.cjsp, n = 1)
set_config(use_proxy(url = "10.3.100.207",port = 8080))
tjsp::baixar_cjsg(inicio_pb = '14/09/2020', fim_pb = '14/09/2020',
diretorio = dir.cjsp, n = 1)
################################################################################
# Author: Eduarda Chagas
# Date : Feb, 2021
# Contact: eduarda.chagas@dcc.ufmg.br
################################################################################
# Packages and sources ---------------------------------------------------------
if(!require(tjsp)) install.packages("tjsp")
if(!require(DBI)) install.packages("DBI")
if(!require(httr)) install.packages("httr")
if(!require(glue)) install.packages("glue")
if(!require(data.table)) install.packages("data.table")
# Global variables -------------------------------------------------------------
start.date = '14/09/2020'
final.date = '14/09/2020'
num.pages = 30
# Step 1: Download cjsp pages --------------------------------------------------
dir.data.raw = "/home/eduarda/Desktop/Codes/JustPredict/radula/data-raw/"
dir.cjsp = paste0(dir.data.raw, 'cjsp')
dir.cposg = paste0(dir.data.raw, 'cposg')
tjsp::baixar_cjsg(inicio_pb = start.date, fim_pb = final.date,
diretorio = dir.cjsp, n = num.pages)
httr::set_config(httr::config(
ssl_verifypeer = FALSE,
accept_encoding = "latin1"
))
body <-
list(
dados.buscaInteiroTeor = "",
dados.pesquisarComSinonimos = "S",
dados.pesquisarComSinonimos = "S",
dados.buscaEmenta = "",
dados.nuProcOrigem = "",
dados.nuRegistro = "",
agenteSelectedEntitiesList = "",
contadoragente = "0",
contadorMaioragente = "0",
codigoCr = "",
codigoTr = "",
nmAgente = "",
juizProlatorSelectedEntitiesList = "",
contadorjuizProlator = "0",
contadorMaiorjuizProlator = "0",
codigoJuizCr = "",
codigoJuizTr = "",
nmJuiz = "",
classesTreeSelection.values = "",
classesTreeSelection.text = "",
assuntosTreeSelection.values = "",
assuntosTreeSelection.text = "",
comarcaSelectedEntitiesList = "",
contadorcomarca = "0",
contadorMaiorcomarca = "0",
cdComarca = "",
nmComarca = "",
secoesTreeSelection.values = "",
secoesTreeSelection.text = "",
dados.dtJulgamentoInicio = "",
dados.dtJulgamentoFim = "",
dados.dtRegistroInicio = '14/09/2020',
dados.dtRegistroFim = '14/09/2020',
dados.origensSelecionadas = "T",
tipoDecisaoSelecionados = "A",
dados.ordenacao = "dtPublicacao"
)
a <-
httr::POST(
"https://esaj.tjsp.jus.br/cjsg/resultadoCompleta.do",
encode = "form",
body = body,
httr::accept("text/html; charset=latin1;")
)
a <-
httr::POST(
"https://esaj.tjsp.jus.br/cjsg/resultadoCompleta.do",
encode = "form",
body = body,
timeout(240000),
httr::accept("text/html; charset=latin1;")
)
a <-
httr::POST(
endepoint = "https://esaj.tjsp.jus.br/cjsg/resultadoCompleta.do",
encode = "form",
body = body,
httr::accept("text/html; charset=latin1;")
)
a <-
httr::POST(
url  = "https://esaj.tjsp.jus.br/cjsg/resultadoCompleta.do",
encode = "form",
body = body,
httr::accept("text/html; charset=latin1;")
)
sessionInfo()
options(curl_interrupt = FALSE)
tjsp::baixar_cjsg(inicio_pb = start.date, fim_pb = final.date,
diretorio = dir.cjsp, n = num.pages)
tjsp::baixar_cjsg(inicio_pb = '14/09/2020', fim_pb = '14/09/2020',
diretorio = dir.cjsp, n = 1)
tjsp::baixar_cjsg(inicio_pb = '14/09/2020', fim_pb = '14/09/2020',
diretorio = dir.cjsp, n = 1)
httr::GET("http://cran.r-project.org/Rlogo.jpg")
httr::GET("http://cran.r-project.org/Rlogo.jpg", config = httr::config(connecttimeout = 60))
curl_version()
tjsp::baixar_cjsg(inicio_pb = '14/09/2020', fim_pb = '14/09/2020',
diretorio = dir.cjsp, n = 1)
curl_version()
if(!require(curl)) install.packages("curl")
curl_version()
tjsp::baixar_cjsg(inicio_pb = '14/09/2020', fim_pb = '14/09/2020',
diretorio = dir.cjsp, n = 1)
curl_fetch_memory("https://httpbin.org/get", new_handle(verbose = TRUE))
system("ping -c5 httpbin.org")
curl::nslookup("httpbin.org")
utils::nsl("httpbin.org")
curl_fetch_memory("http://54.175.219.8/get", new_handle(verbose = TRUE))
RCurl::getURL("https://httpbin.org/get")
curl_fetch_memory("https://httpbin.org/get", handle = new_handle(CONNECTTIMEOUT = 60))
# Packages and sources ---------------------------------------------------------
if(!require(tjsp)) install.packages("tjsp")
if(!require(DBI)) install.packages("DBI")
if(!require(httr)) install.packages("httr")
if(!require(glue)) install.packages("glue")
if(!require(curl)) install.packages("curl")
if(!require(data.table)) install.packages("data.table")
# Packages and sources ---------------------------------------------------------
if(!require(tjsp)) install.packages("tjsp")
if(!require(DBI)) install.packages("DBI")
if(!require(httr)) install.packages("httr")
if(!require(glue)) install.packages("glue")
if(!require(curl)) install.packages("curl")
if(!require(data.table)) install.packages("data.table")
# Global variables -------------------------------------------------------------
start.date = '01/02/2021'
final.date = '01/02/2021'
num.pages = 30
# Step 1: Download cjsp pages --------------------------------------------------
dir.data.raw = "/home/eduarda/Desktop/Codes/JustPredict/Research/research-master/data-raw/"
dir.cjsp = paste0(dir.data.raw, 'cjsp')
dir.cposg = paste0(dir.data.raw, 'cposg')
tjsp::baixar_cjsg(inicio_pb = '14/09/2020', fim_pb = '14/09/2020',
diretorio = dir.cjsp, n = 1)
setwd("/home/eduarda/Desktop/Codes/Markov/Transition-Graphs-and-Markov-Chains-master/Code")
if(!require(ggplot2)){
install.packages("ggplot2")
require(ggplot2)
}
if(!require(ggthemes)){
install.packages("ggthemes")
require(ggthemes)
}
if(!require(doParallel)){
install.packages("doParallel")
require(doParallel)
}
source("GenerateSequencies.R")
source("TransitionGraph.R")
set.seed(456)
N.sequences = 50
ts.10k = read.csv('../Data/ts_10k.csv')
ts.100k = read.csv('../Data/ts_100k.csv')
new.ts.10k = matrix(nrow = 50, ncol = 10000)
for(i in 1:N.sequences){
cat('Generating sequence 10k', i, ' of ', 50, '\n')
new.ts.10k[i, ] = generate.sequence(unlist(ts.10k[i, 1:9900, 1]), n.new.elements = 100)
}
write.csv(new.ts.10k, '../Data/new_ts_10k.csv')
